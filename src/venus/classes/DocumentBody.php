<?php
/**
* The Document "Class"
* @package Venus
 */

namespace Venus;

/**
* The Document "Class"
* Since php doesn't allow multiple inheritance, it's implement as an interface + a trait
*/
trait DocumentBody
{
	use \Venus\Document\PrepareTrait;
	use \Venus\Document\ConfigTrait;
	use \Venus\Document\PermissionsTrait;
	use \Venus\Document\OutputTrait;
	use \Venus\Document\ImageTrait;
	use \Venus\Document\CategoryTrait;
	use \Venus\Document\CategoriesTrait;
	use \Venus\Document\CacheTrait;
	use \Venus\Document\ModeratorTrait;

	/**
	* @var string $content The content generated by this document
	*/
	public string $content = '';

	/**
	* @var string $layout The layout used to render the document, if any
	*/
	public string $layout = '';

	/**
	* @var string $url The document's url
	*/
	public string  $url = '';

	/**
	* @var float $exec_time The time needed to run this document
	*/
	public float $exec_time = 0;

	/**
	* Sets the title of the current document
	* @param string $title The title
	* @return $this
	*/
	public function setTitle(string $title)
	{
		$this->app->title->set($title);

		$this->title = $title;

		return $this;
	}

	/**
	* Returns the title of the current document
	* @return string
	*/
	public function getTitle() : string
	{
		if ($this->title_alias) {
			return $this->title_alias;
		}

		return $this->title;
	}

	/**
	* Adds the specified meta data in <head>
	* @param string $name The name of the meta tag
	* @param string $content The content of the meta tag
	* @return $this
	*/
	public function addMeta(string $name, string $content)
	{
		$this->app->meta->add($name, $content);

		return $this;
	}

	/**
	* Sets the meta author tag
	* @param string $author The author's name
	* @return $this
	*/
	public function setMetaAuthor(string $author)
	{
		$this->addMeta('author', $author);

		return $this;
	}

	/**
	* Sets the meta keywords tag
	* @param string $keywords The meta keywords
	* @return $this
	*/
	public function setMetaKeywords(string $keywords)
	{
		$this->addMeta('keywords', $keywords);

		return $this;
	}

	/**
	* Sets the meta description tag
	* @param string $desc The meta description
	* @return $this
	*/
	public function setMetaDescription(string $desc)
	{
		$this->addMeta('description', $desc);

		return $this;
	}

	/**
	* Adds a breadcrumb to the breadcrumbs list
	* @param string $title The title of the breadcrumb
	* @param string $url The url of the breadcrumb
	* @return $this
	*/
	public function addBreadcrumb(string $title, string $url = '')
	{
		$this->app->breadcrumbs->add($title, $url);

		return $this;
	}

	/**
	* Removes a breadcrumb
	* @param string $title The title of the breadcrumb to remove. If empty,the last breadcrumb is removed
	* @return $this
	*/
	public function deleteBreadcrumb(string $title = '')
	{
		$this->app->breadcrumbs->delete($title);

		return $this;
	}

	/**
	* Adds an error to the errors list.
	* @param string $error The error
	* @param bool $escape_html If true will html escape $error
	* @return $this
	*/
	public function addError(string $error, bool $escape_html = true)
	{
		$this->app->errors->add($error, $escape_html);

		return $this;
	}

	/**
	* Adds multiple errors to the errors list
	* @param array $errors The errors array
	* @param array $strings If $string is empty, will add as an error each element of $errors. If $string is not empty, will add as en error each $strings[$key] where $key is element in $errors
	* @return $this
	*/
	public function addErrors(array $errors, array $strings = [])
	{
		$this->app->errors->adds($errors, $strings);

		return $this;
	}

	/**
	* Adds a message to the messages list.
	* @param string $message The message
	* @param bool $escape_html If true will html escape $message
	* @return $this
	*/
	public function addMessage(string $message, bool $escape_html = true)
	{
		$this->app->messages->add($message, $escape_html);

		return $this;
	}

	/**
	* Adds multiple messages to the messages list
	* @param array $messages The messages array
	* @param array $strings If $string is empty, will add as an message each element of $messages. If $string is not empty, will add as en message each $strings[$key] where $key is element in $messages
	* @return $this
	*/
	public function addMessages(array $messages, array $strings = [])
	{
		$this->app->messages->addMessages($messages, $strings);

		return $this;
	}

	/**
	* Adds a notification to the notifications list.
	* @param string $notification The notification
	* @param bool $escape_html If true will html escape $notification
	* @return $this
	*/
	public function addNotification(string $notification, bool $escape_html = true)
	{
		$this->app->notifications->add($notification, $escape_html);

		return $this;
	}

	/**
	* Adds multiple notifications to the notifications list
	* @param array $notifications The notifications array
	* @param array $strings If $string is empty, will add as an notification each element of $notifications. If $string is not empty, will add as en notification each $strings[$key] where $key is element in $notifications
	* @return $this
	*/
	public function addNotifications(array $notifications, array $strings = [])
	{
		$this->app->notifications->adds($notifications, $strings);

		return $this;
	}

	/**
	* Adds a warning to the warnings list.
	* @param string $warning The warning
	* @param bool $escape_html If true will html escape $warning
	* @return $this
	*/
	public function addWarning(string $warning, bool $escape_html = true)
	{
		$this->app->warnings->add($warning, $escape_html);

		return $this;
	}

	/**
	* Adds multiple warnings to the warnings list
	* @param array $warnings The warnings array
	* @param array $strings If $string is empty, will add as an warning each element of $warnings. If $string is not empty, will add as en warning each $strings[$key] where $key is element in $warnings
	* @return $this
	*/
	public function addWarnings(array $warnings, array $strings = [])
	{
		$this->app->warnings->adds($warnings, $strings);

		return $this;
	}

	/**
	* Returns true if no errors have been generated
	* @return bool
	*/
	public function ok() : bool
	{
		return $this->app->ok();
	}

	/*********************Output Methods*****************************/

	/**
	* Outputs the content of a document
	* @param string $action The action to be performed. If empty $this->app->request->get_action is used
	* @return bool True if the content was outputed, false otherwise
	*/
	public function output(string $action = '')
	{
		if (!$this->canOutput()) {
			return false;
		}

		if ($this->app->config->debug) {
			$this->app->timer->start('document_output');
		}

		$this->app->plugins->run('documentOutput', $action, $this);

		$this->setup();

		$this->content = $this->getContent($action);

		$this->content = $this->app->plugins->filter('documentContent', $this->content, $this->getType(), $action, $this);

		echo $this->getOutput();

		if ($this->app->config->debug) {
			$this->exec_time = $this->app->timer->end('document_output');
		}

		return true;
	}

	/**
	* Determines if the document's content can be outputed
	* @return bool
	*/
	protected function canOutput() : bool
	{
		if (!$this->getId()) {
			$this->app->redirect404();
		}

		if (!$this->status) {
			if ($this->app->user->is_admin) {
				$this->app->lang->loadFile('notifications');
				$this->app->notifications->add(l($this->getType() . '_preview_notification'));
			} else {
				$this->app->redirect404();
			}
		}

		if (!$this->permissions['view']) {
			$this->app->permissionDenied();
		}

		return true;
	}

	/**
	* Loads the document's template and returns the output
	* @return string
	*/
	protected function getOutput() : string
	{
		$type = $this->getType();
		$content_dir = $this->getContentDir();

		$template_name = $type;
		if ($this->layout) {
			$template_name = 'layouts/' . $content_dir . '/' . $this->layout;
		}

		$this->app->theme->addVar($type, $this);

		return $this->app->theme->getTemplate($template_name);
	}

	/**
	* Setups the app/meta tags/breadcrumbs etc...
	*/
	protected function setup()
	{
		$this->setApp();
		$this->setMeta();
		$this->setBreadcrumbs();

		$this->updateHits();
	}

	/**
	* Sets the application's url & show options
	*/
	protected function setApp()
	{
		$this->app->url = $this->url;
		$this->app->show_widgets = $this->show_widgets;
		$this->app->show_breadcrumbs = $this->show_breadcrumbs;
	}

	/**
	* Sets the meta data of this document
	*/
	protected function setMeta()
	{
		$this->app->title->set($this->meta_title);

		if ($this->meta_keywords) {
			$this->app->meta->add('keywords', $this->meta_keywords);
		}
		if ($this->meta_description) {
			$this->app->meta->add('description', $this->meta_description);
		}
		if ($this->meta_author) {
			$this->app->meta->add('author', $this->meta_author);
		}
		if ($this->meta_robots) {
			$this->app->meta->add('robots', $this->meta_robots);
		}

		$this->app->plugins->run('documentBuildMeta', $this);

		return $this;
	}

	/**
	* Sets the breadcrumbs
	*/
	protected function setBreadcrumbs()
	{
		$this->addCategoryBreadcrumb();
		$this->addBreadcrumb($this->title, $this->url);
	}

	/**
	* Builds the category breadcrumb
	*/
	protected function addCategoryBreadcrumb()
	{
		if (!$this->category->cid) {
			return;
		}

		$categories = $this->app->env->getCategories();
		if (!isset($categories[$this->category->cid])) {
			return;
		}

		$lineage = explode('-', $this->category->lineage);
		if (!$lineage) {
			return;
		}

		foreach ($lineage as $cid) {
			if ($cid == VENUS_CATEGORY_HOMEPAGE) {
				continue;
			}

			if (!isset($categories[$cid])) {
				continue;
			}

			$category = $categories[$cid];

			$url = $this->app->uri->getCategory($category);
			$title = $category->title;
			if ($category->title_alias) {
				$title = $category->title_alias;
			}

			$this->addBreadcrumb($title, $url);
		}
	}

	/**
	* Increses the number of hits by 1, if we're tracking it
	*/
	public function updateHits()
	{
		if (!$this->track_hits) {
			return;
		}

		$this->hits++;

		$table = $this->getTable();
		$id = (int)$this->getId();
		$id_name = $this->getIdName();

		$this->app->db->writeQuery("UPDATE {$table} SET hits = hits + 1 WHERE {$id_name} = {$id}");
	}
}
